
//**************************************************************************************************************
//Intro: This is a Word Jumble Game                                                                            *
//The user will see a group of scrambling letters in random order                                              *
//There will be TEN words in total and each word will have its hint                                            *
//Users can choose to see the hint/ continue without hint/ quit after failing guessing the word.               *
//This program is created by Douzi Ma and Lexin Li and Eliya.                                                  *
//Date: 05/17/2019                                                                                             *
//                                                                                                             *
//Let's begin!!                                                                                                *
//**************************************************************************************************************

//header files

#include<iostream>
#include<string>
#include<cstdlib>
#include<ctime> //create random words

using namespace std;

namespace jumble
{
	//an array of string that can hold 10 elements of words
	const string WORDS[10] =
	{
		"eyebrow","guitar","jelly","dolphin",
		"rainbow","fire","psychology","vowel",
		"hazelnut","cabin"
	}; 
	
	//an array of string that can hold 10 hints to those words respectively
	const string HINTS[10] =
	{
		"It is on your face",
		"It is a musical instrument",
		"It is soft and semisolid",
		"It is a mammal which does not live on the land",
		"You can see it but you cannot touch it",
		"It releases light",
		"It is a study",
		"A E I",
		"My favorite flavor of coffee creamer",
		"It is built of wood"
	};
};

class wordJumble
{
public:
	//constructor
	wordJumble()
	{
		tries = 0;
		index = (rand() % 10);
		word = " ";
		guess = " ";;
		jumbledWord = " ";
		hint = " ";
	}

	void jumbleWord(string w);
	void introduce();
	void askHint();
	void playAgain();
	bool checkGuess(string g);
	void run();
	void popWord();

private:
	int tries;
	int index;
	string word;
	string hint;
	string jumbledWord;
	string guess;
};

//introduce function is a display function at the beginning of the game
void wordJumble::introduce()

{
	//Set the first pair of word/hint (index is a random number)
	word = jumble::WORDS[index];
	hint = jumble::HINTS[index];
	//Scramble the word that had been choosen above by calling the jumbleWord function
	jumbleWord(word);

	cout << "Welcome to the *WORD JUMBLE* game!!!" << endl;
	cout << "Your will have three attempts to guess the word" << endl;
	cout << "Type 'hint' for a hint" << endl;
	cout << "Type 'quit'to quit the game" << endl;
	cout << "You will only have THREE chances to guess the word." << endl;

	//Display the 1st word
	cout << "The jumbled word is: " << jumbledWord;
}

//jumbleWord function is used to scramble the word from the list
void wordJumble::jumbleWord(string w)
{
	//declare a string variable of the jumbled word
	jumbledWord = w;
	int length = jumbledWord.size(); // the length of the word will be used in for loop as a index
	for (int i = 0; i < length; ++i) //Use the length of the word as a counter, and a for loop to change the order of the letters 
	{
		int a = (rand() % length);
		int b = (rand() % length);
		char temp = jumbledWord[a];
		jumbledWord[a] = jumbledWord[b];
		jumbledWord[b] = temp;
	}
}

//run function starts by asking the user for his guess
//everytieme the user want to playagain this function will be called 
void wordJumble::run()
{
	while (true) //while true==ture use for infinite loop
	{
		tries++;
		cout << "\nYour guess: " << endl;
		cin >> guess;
		
		//after 3 tries the answer is still wrong
		if (tries >= 3&&guess!=word)
		{
			cout << "\nSorry, your guess is wrong and you have used up your three chances" << endl;
			cout << "The right answer is " << word <<"\n"<< endl;
			//ask the user if they want to start a new round
			tries = 0;
			playAgain();
			break;
		}
		
		//The user got the answer on his 3rd try
		if (tries == 3 && guess == word)
		{
			cout << "Congratulations! That is the right answer. " << endl;
			tries = 0;
			playAgain();
		}

		//instead of check the guess in the run function, we will pass the guess to the checkGuess function 
		if (checkGuess(guess))
			break; //while the user got the right answer, stop the loop menually by a break statement

	}

//check guess function is a bool function 
//It will receive the string word that the user typed in from run function
//And it will return true or false depends on the anwer
}bool wordJumble::checkGuess(string g)
{
	//if the user want to see the hint directly, display the hint and return false
	if (g == "hint")
	{
		cout << hint;
		return false; //coutinuing asking for guess
	}

	//If the user type quit
	//end the program
	else if (g == "quit")

	{
		cout << "\nThe right answer is: " << word << endl;
		cout << "End the program" << endl;
		cout << "Thank you for playing!!" << endl;
	}

	//If the guess is wrong and is not'hint' 
	//call askHint function to makesure the user want a hint or not
	else if (g != word && g != "hint")
	{
		askHint();
	}

	//If the user got the right answer
	//ask the user if want to play again by calling the playAgain function
	else if (g == word)
	{
		cout << "Congratulations!! That is the right word" << endl;
		playAgain();
	}
}

//askHint function is used if the user's input neither the answer no 
void wordJumble::askHint()

{
	string H;
	beginning:
	cout << "Your answer is wrong, do you want a hint?" << endl;
	cout << "'hint' for hint, 'quit' for end, 'c' for continuing guessing" << endl;
	cin >> H;

	//if the user want to conitue guessing without hint ,run the run();function again asking for his/her guess
	if (H == "c")
	{
		run();
	}

	//if the user want a hint, display the hint and run the run(): function again asking for his/her guess
	else if (H == "hint")
	{
		cout << hint;
		run();
	}

	//if the user want to quit
	else if (H == "quit")
	{
		cout << "Thank you for playing" << endl;
		cout << "The right answer is : " << word;
		exit(0);
	}

	else if (H== word)
	{
		cout << "Congradulations!! That's the right answer" << endl;
		playAgain();
	}
	//if the answer is not the options provided above, by setting a beginning point
	//The program will loop the askHint function from the beginning point forever
	//until get the 'hint' 'quit' or 'c'
	else
	{
		goto beginning;
	}
}

//playAgain function is used to ask the user if he want to play again after every round
void  wordJumble::playAgain()
{
	string decision;
	cout << "Do you want to play again?" << endl;
	cout << "Type 'yes'for play again and 'quit' for quit" << endl;

	cin >> decision;

	if (decision == "yes")
	{
		//if the user want to play again, use the popWord function to create a different word from the previous one
		//Notice:if we just call the introduction function again, it will display the same word again
		//That's the reason we made the popword function
		popWord();
	}

	else if (decision == "quit")
	{
		cout << "Thank you for playing." << endl;
		exit(0);
	}
}


//popWord function is used to create a new scrambled word which is different from the previous one
void wordJumble::popWord()
{
	int i = (rand() % 10); //a new random number between 1 and 10

	//choose the i th word and scramble it
	word = jumble::WORDS[i];
	hint = jumble::HINTS[i];
	jumbleWord(word);

	cout << "The jumbled word is: " << jumbledWord;
	//Now we can run the whole process again
	run();
}

int main()
{
	srand(static_cast<unsigned int>(time(0)));

	//create the object 'game' from the wordJumble class
	wordJumble game;
	//introduce the game and run the 1st round
	game.introduce();
	game.run();

	cin.ignore();

	return 0;
}
